<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize variables

//Actual move speed and a max speed to prevent diagonal speed increases
move_speed = 2
max_speed = 2

//What side is the player facing
move_side = 0
idle_side = 1

//Player's interaction reach
range = 20

//Player paused value to stop the player in UI etc
paused = false;

//Inventory variable
inventSize = 40;
invent = array_create(inventSize);

//Slot is an array containing itemID, amount, sprite
slot = array_create(3);
slot[0] = "empty";
slot[1] = 0;
slot[2] = "none";
//Add slots to the invent
invent = scr_populate_inventory_with_slots(invent, slot);
drawInventory = false;
done = false;
/*
//For testing purposes
hoe = array_create(3);
hoe[0] = "hoe";
hoe[1] = 1;
hoe[2] = "spr_hoe";

seeds = array_create(3);
seeds[0] = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (paused){
    move_speed = 0;
    speed = 0;
}
else{
    //Run our keyboard control script
    scr_player_keyboard_controls();

    //Run our collision checking script
    scr_check_collision_solid_block_old();  
}

//check to see if an object needs to be removed from the inventory
//cycle through the hotbar length (10)
for(i=0; i &lt; 10; i+=1){
    slot = invent[i];
    //if the slot isnt empty check and see if the amount is 0 or less than
    if(slot[0] != "empty"){
        if(slot[1] == 0 or slot[1] &lt; 0){
            slot[0] = "empty";
            slot[2] = "none";
        }
    }


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command = get_string("Enter command :",""); //Get input
scr_run_command(command);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hotbar
yCoord = 700;
xCoord = 3;    
for(i = 0; i&lt;10; i+=1){
    slot = invent[i];
    if(slot[0] != "empty"){
    draw_sprite(asset_get_index(slot[2]), 0, xCoord, yCoord);
    }
    xCoord += 70;
}

//Player inventory
if(drawInventory or done){
    yCoord = 100;
    slotCount = 0;
    for(yIndex = 0; yIndex &lt; 4; yIndex+=1){
        xCoord = 100;    
        for(xIndex = 0; xIndex &lt; 10; xIndex+=1){
            draw_sprite(spr_invSlot, 0, xCoord, yCoord);
            slot = invent[slotCount];
            if(slot[0] != "empty"){
                draw_sprite(asset_get_index(slot[2]), 0, xCoord, yCoord);
            }
            slotCount +=1;
            xCoord += 31;
        }
        yCoord += 31;
    }
    done = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message(invent);
if(drawInventory){
    drawInventory = false;
    done = false;
}
else{
    drawInventory = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if there is an interactable within range
if (distance_to_object(obj_interactable) &lt; range){
    //Toggle paused to false if it's true
    if(paused){
        paused = false;
        move_speed = 4;
    }
    //Get the nearest instance of interactables
    objParent = instance_nearest(x, y, obj_interactable);
    
    //With iterates through all instances of the parent and children objects
    with(objParent){
        
        //Find the first instance that isn't the parent
        if (object_index != obj_interactable){
            
            //Get a reference to the nearest object of that index
            obj = instance_nearest(x, y, object_index);
            
            //If the object is a furnace change sprite and draw UI
            if (object_index == obj_furnace){
                if !obj.drawUI = true{
                    obj.sprite_index = spr_furnace_used;
                    obj.drawUI = true;
                }
                else{
                    obj.sprite_index = spr_furnace;
                    obj.drawUI = false;
                }
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(move_speed = 2){
    move_speed = 6;
    max_speed = 6;
}
else if(move_speed = 6){
    move_speed = 2;
    max_speed = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
